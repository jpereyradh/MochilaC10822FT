a. ¿Quién inventó el sistema de control de versión Git y por qué?
Como muchas de las grandes cosas en esta vida, Git comenzó con un poco de destrucción creativa y una gran polémica.

El kernel de Linux es un proyecto de software de código abierto con un alcance bastante amplio. Durante la mayor parte del mantenimiento del kernel de Linux (1991-2002), los cambios en el software se realizaron a través de parches y archivos. En el 2002, el proyecto del kernel de Linux comenzó a usar un DVCS propietario BitKeeper.

En el 2005, la relación entre la comunidad que desarrolló el kernel de Linux y la compañía que desarrolló BitKeeper se vino abajo y la herramienta dejó de ser ofrecido de manera gratuita. Esto impulsó a la comunidad de desarrollo de Linux (y en particular a Linus Torvalds, el creador de Linux) a desarrollar su propia herramienta basada en algunas de las lecciones que aprendieron mientras usaban BitKeeper. Algunos de los objetivos del nuevo sistema fueron los siguientes:

velocidad

Diseño sencillo

Gran soporte para desarrollo no lineal (millas de ramas paralelas)

Completamente distribuido

Capaz de manejar grandes proyectos (como el kernel de Linux) eficientemente (velocidad y tamaño de los datos)

Desde su nacimiento en el 2005, Git ha evolucionado y madurado para ser fácil de usar y conservar sus características iniciales. Es tremendamente rápido, muy eficiente con grandes proyectos y tiene un increíble sistema de ramificación (branching) para desarrollo no lineal (véase [ch03-git-branching] )
b. ¿A quién pertenece actualmente Github y por qué?
Git es un sistema de control de versiones distribuido gratuito y de código abierto diseñado para manejar todo, desde proyectos pequeños hasta proyectos muy grandes, con rapidez y eficiencia.

Git es fácil de aprender y ocupa poco espacio con un rendimiento ultrarrápido . Supera a las herramientas de SCM como Subversion, CVS, Perforce y ClearCase con características como sucursales locales económicas , áreas de preparación convenientes y múltiples flujos de trabajo .
c. ¿Hay otra forma que no sea la terminal para trabajar con Github?
Existe otra serie de cliente Git con interfaz gráfica que oscilan entre las herramientas especializadas con un único fin y las aplicaciones que intentan presentar todo lo que Git puede hacer. La página oficial de Git tiene una sucinta lista de los clientes más utilizados en http://git-scm.com/downloads/guis . Aunque en la wiki de Git se puede encontrar una lista más completa https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Graphical_Interfaces .
